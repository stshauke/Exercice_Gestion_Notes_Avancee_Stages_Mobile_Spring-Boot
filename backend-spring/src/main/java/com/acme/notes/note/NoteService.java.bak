package com.acme.notes.note;

import com.acme.notes.user.User;
import com.acme.notes.user.UserRepository;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.List;

@Service
public class NoteService {

  private final NoteRepository repo;
  private final UserRepository users;

  public NoteService(NoteRepository repo, UserRepository users) {
    this.repo = repo;
    this.users = users;
  }

  public List<NoteViewDto> list() {
    return java.util.Collections.emptyList();
  }

  public List<NoteViewDto> listFor(String email) {
    var u = users.findByEmail(email).orElseThrow();
    return repo.findByOwner(u).stream().map(NoteViewDto::from).toList();
  }

  public NoteViewDto create(String email, NoteCreateDto dto) {
    var u = users.findByEmail(email).orElseThrow();
    Note n = new Note();
    n.setTitle(dto.title());
    n.setContentMd(dto.contentMd());
    n.setOwner(u);
    n.setVisibility(Visibility.PRIVATE);
    Instant now = Instant.now();
    n.setCreatedAt(now);
    n.setUpdatedAt(now);
    n = repo.save(n);
    return NoteViewDto.from(n);
  }

  public NoteViewDto update(String email, Long id, NoteUpdateDto dto) {
    var u = users.findByEmail(email).orElseThrow();
    Note n = repo.findByIdAndOwner(id, u).orElseThrow();
    if (dto.title() != null && !dto.title().isBlank()) {
      n.setTitle(dto.title());
    }
    if (dto.contentMd() != null && !dto.contentMd().isBlank()) {
      n.setContentMd(dto.contentMd());
    }
    n.setUpdatedAt(Instant.now());
    n = repo.save(n);
    return NoteViewDto.from(n);
  }

  public void delete(String email, Long id) {
    var u = users.findByEmail(email).orElseThrow();
    if (!repo.existsById(id)) throw new ResponseStatusException(HttpStatus.NOT_FOUND);
    repo.deleteByIdAndOwner(id, u);
  }
}