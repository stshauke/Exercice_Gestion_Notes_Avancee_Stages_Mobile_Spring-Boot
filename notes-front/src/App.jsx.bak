import React, { useEffect, useState } from "react";
import { Routes, Route, Navigate, Link, useNavigate } from "react-router-dom";
import { Plus, StickyNote, LogOut, Pencil, Trash2, Share2, Users } from "lucide-react";
import PublicNotePage from "./PublicNotePage";
import SharedNotesPage from "./SharedNotesPage";
import { login, register, Notes, PublicLinks } from "./lib/api";

export function Protected({ children }) {
  const hasToken = !!localStorage.getItem("token");
  return hasToken ? children : <Navigate to="/login" replace />;
}

export function Shell({ children }) {
  const navigate = useNavigate();
  const logout = () => {
    localStorage.removeItem("token");
    navigate("/login");
  };
  return (
    <div className="min-h-full">
      <header className="sticky top-0 z-10 border-b bg-white/70 backdrop-blur">
        <div className="mx-auto max-w-5xl px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link to="/app" className="inline-flex items-center gap-2 font-semibold">
              <StickyNote className="size-5" />
              Mes Notes
            </Link>
            <Link to="/shared" className="inline-flex items-center gap-2 rounded-lg border px-2 py-1 text-sm hover:bg-slate-50">
              <Users className="size-4" />
              Partagées avec moi
            </Link>
          </div>
          <button onClick={logout} className="inline-flex items-center gap-2 rounded-xl border px-3 py-1.5 text-sm hover:bg-slate-50">
            <LogOut className="size-4" />
            Logout
          </button>
        </div>
      </header>
      <main className="mx-auto max-w-5xl p-4">{children}</main>
    </div>
  );
}

function LoginPage() {
  const navigate = useNavigate();
  const [email, setEmail] = useState("test@example.com");
  const [password, setPassword] = useState("Passw0rd!");
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState("");

  const submit = async (e) => {
    e.preventDefault();
    setBusy(true);
    setErr("");
    try {
      await register(email, password, "USER");
      await login(email, password);
      navigate("/app", { replace: true });
    } catch (e) {
      console.error(e);
      setErr("Identifiants invalides");
    } finally {
      setBusy(false);
    }
  };

  return (
    <div className="min-h-full grid place-items-center p-6">
      <div className="w-full max-w-md rounded-2xl border bg-white/70 backdrop-blur p-6 shadow-sm">
        <div className="mb-4">
          <h1 className="text-2xl font-semibold">Bienvenue</h1>
          <p className="text-sm text-slate-600">Connecte-toi pour gérer tes notes.</p>
        </div>
        <form onSubmit={submit} className="grid gap-3">
          <label className="grid gap-1 text-sm">
            <span className="text-slate-600">Email</span>
            <input
              type="email"
              className="rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-slate-300"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </label>
          <label className="grid gap-1 text-sm">
            <span className="text-slate-600">Mot de passe</span>
            <input
              type="password"
              className="rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-slate-300"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </label>
          {err && <div className="text-red-600 text-sm">{err}</div>}
          <button
            disabled={busy}
            className="mt-2 inline-flex items-center justify-center gap-2 rounded-xl bg-slate-900 px-4 py-2 text-white hover:bg-slate-800 disabled:opacity-60"
          >
            Se connecter
          </button>
        </form>
      </div>
    </div>
  );
}

function NoteModal({ open, onClose, initial, onSave }) {
  const [title, setTitle] = useState(initial?.title ?? "");
  const [content, setContent] = useState(initial?.content ?? "");

  useEffect(() => {
    if (open) {
      setTitle(initial?.title ?? "");
      setContent(initial?.content ?? "");
    }
  }, [open, initial]);

  if (!open) return null;
  return (
    <div className="fixed inset-0 bg-black/20 backdrop-blur-sm grid place-items-center p-4">
      <div className="w-full max-w-lg rounded-2xl border bg-white p-5 shadow-lg">
        <h3 className="text-lg font-semibold mb-3">
          {initial ? "Modifier la note" : "Nouvelle note"}
        </h3>
        <div className="grid gap-3">
          <input
            className="rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-slate-300"
            placeholder="Titre"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
          <textarea
            className="min-h-32 rounded-xl border px-3 py-2 outline-none focus:ring-2 focus:ring-slate-300"
            placeholder="Contenu"
            value={content}
            onChange={(e) => setContent(e.target.value)}
          />
          <div className="flex justify-end gap-2 pt-1">
            <button onClick={onClose} className="rounded-xl border px-3 py-1.5 hover:bg-slate-50">
              Annuler
            </button>
            <button
              onClick={() => onSave({ title: title.trim(), content: content.trim() })}
              className="inline-flex items-center gap-2 rounded-xl bg-slate-900 px-4 py-1.5 text-white hover:bg-slate-800"
            >
              <Plus className="size-4" />
              Enregistrer
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

function NotesPage() {
  const [notes, setNotes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [modalOpen, setModalOpen] = useState(false);
  const [editing, setEditing] = useState(null);

  const refresh = async () => {
    setLoading(true);
    try {
      const data = await Notes.list();
      setNotes(data);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => { refresh(); }, []);

  const createNote = async (n) => {
    if (!n.title) return;
    const created = await Notes.create(n);
    setNotes((prev) => [created, ...prev]);
    setModalOpen(false);
  };

  const updateNote = async (id, n) => {
    const updated = await Notes.update(id, n);
    setNotes((prev) => prev.map((x) => (x.id === id ? updated : x)));
    setEditing(null);
  };

  const deleteNote = async (id) => {
    const res = await Notes.remove(id);
    if (res.status === 204 || res.ok) {
      setNotes((prev) => prev.filter((x) => x.id !== id));
    } else {
      alert("Suppression refusée (403)");
    }
  };

  const shareNote = async (id) => {
    try {
      const pl = await PublicLinks.create(id);
      alert("Lien public: " + window.location.origin + "/public/" + pl.urlToken);
    } catch (e) {
      console.error("Erreur lors du partage:", e);
      alert("Impossible de partager la note");
    }
  };

  return (
    <Shell>
      <div className="mb-4 flex items-center justify-between gap-3">
        <div>
          <h2 className="text-xl font-semibold">Mes notes</h2>
          <p className="text-sm text-slate-600">Créer, modifier, supprimer, partager vos notes.</p>
        </div>
        <button
          onClick={() => { setEditing(null); setModalOpen(true); }}
          className="inline-flex items-center gap-2 rounded-xl bg-slate-900 px-4 py-2 text-white hover:bg-slate-800"
        >
          <Plus className="size-4" /> Nouvelle note
        </button>
      </div>

      {loading ? (
        <div className="text-slate-600">Chargement…</div>
      ) : notes.length === 0 ? (
        <div className="rounded-2xl border bg-white p-6 text-center text-slate-600">Aucune note.</div>
      ) : (
        <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {notes.map((n) => (
            <div key={n.id} className="group rounded-2xl border bg-white p-4 shadow-sm hover:shadow-md transition-shadow">
              <div className="mb-2 flex items-start justify-between gap-3">
                <h3 className="font-semibold truncate">{n.title}</h3>
                <div className="opacity-80 group-hover:opacity-100 flex gap-1">
                  <button
                    title="Modifier"
                    className="rounded-lg border p-1.5 hover:bg-slate-50"
                    onClick={() => { setEditing(n); setModalOpen(true); }}
                  >
                    <Pencil className="size-4" />
                  </button>
                  <button
                    title="Supprimer"
                    className="rounded-lg border p-1.5 hover:bg-red-50"
                    onClick={() => deleteNote(n.id)}
                  >
                    <Trash2 className="size-4" />
                  </button>
                  <button
                    title="Partager"
                    className="rounded-lg border p-1.5 hover:bg-blue-50"
                    onClick={() => shareNote(n.id)}
                  >
                    <Share2 className="size-4" />
                  </button>
                </div>
              </div>
              <p className="text-sm text-slate-700 whitespace-pre-wrap">{n.content}</p>
            </div>
          ))}
        </div>
      )}

      <NoteModal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        initial={editing}
        onSave={(payload) => (editing ? updateNote(editing.id, payload) : createNote(payload))}
      />
    </Shell>
  );
}

export default function App() {
  return (
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      <Route path="/app" element={<Protected><NotesPage /></Protected>} />
      <Route path="/shared" element={<Protected><SharedNotesPage /></Protected>} />
      <Route path="/public/:token" element={<PublicNotePage />} />
      <Route path="*" element={<Navigate to="/app" replace />} />
    </Routes>
  );
}